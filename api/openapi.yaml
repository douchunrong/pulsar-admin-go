openapi: 3.0.1
info:
  description: This provides the REST API for admin operations
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Pulsar Admin REST API
  version: v2
servers:
- url: /admin/v2
tags:
- name: bookies
- name: broker-stats
- name: brokers
- name: clusters
- name: namespaces
- name: non-persistent topic
- name: persistent topic
- name: resource-quotas
- name: schemas
- name: tenants
paths:
  /bookies/racks-info:
    get:
      operationId: getBookiesRackInfo
      responses:
        200:
          content:
            application/json:
              schema:
                additionalProperties:
                  additionalProperties:
                    $ref: '#/components/schemas/BookieInfo'
                  type: object
                type: object
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
      summary: Gets the rack placement information for all the bookies in the cluster
      tags:
      - bookies
  /bookies/racks-info/{bookie}:
    delete:
      operationId: deleteBookieRackInfo
      parameters:
      - in: path
        name: bookie
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
      summary: Removed the rack placement information for a specific bookie in the
        cluster
      tags:
      - bookies
    get:
      operationId: getBookieRackInfo
      parameters:
      - in: path
        name: bookie
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookieInfo'
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
      summary: Gets the rack placement information for a specific bookie in the cluster
      tags:
      - bookies
    post:
      operationId: updateBookieRackInfo
      parameters:
      - in: path
        name: bookie
        required: true
        schema:
          type: string
      - in: query
        name: group
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
      summary: Updates the rack placement information for a specific bookie in the
        cluster
      tags:
      - bookies
  /broker-stats/allocator-stats/{allocator}:
    get:
      operationId: getAllocatorStats
      parameters:
      - in: path
        name: allocator
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllocatorStats'
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
      summary: Get the stats for the Netty allocator. Available allocators are 'default'
        and 'ml-cache'
      tags:
      - broker-stats
  /broker-stats/bookieops:
    get:
      operationId: getPendingBookieOpsStats
      responses:
        200:
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/PendingBookieOpsStats'
                type: object
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
      summary: Get pending bookie client op stats by namesapce
      tags:
      - broker-stats
  /broker-stats/broker-resource-availability/{tenant}/{namespace}:
    get:
      description: This API gives the current broker availability in percent, each
        resource percentage usage is calculated and thensum of all of the resource
        usage percent is called broker-resource-availability<br/><br/>THIS API IS
        ONLY FOR USE BY TESTING FOR CONFIRMING NAMESPACE ALLOCATION ALGORITHM
      operationId: getBrokerResourceAvailability
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/ResourceUnit'
                type: object
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        409:
          content: {}
          description: Load-manager doesn't support operation
      summary: Broker availability report
      tags:
      - broker-stats
  /broker-stats/load-report:
    get:
      description: consists of topics stats & systemResourceUsage
      operationId: getLoadReport
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadReport'
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
      summary: Get Load for this broker
      tags:
      - broker-stats
  /broker-stats/mbeans:
    get:
      operationId: getMBeans
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Metrics'
                type: array
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
      summary: Get all the mbean details of this broker JVM
      tags:
      - broker-stats
  /broker-stats/metrics:
    get:
      description: Requested should be executed by Monitoring agent on each broker
        to fetch the metrics
      operationId: getMetrics
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Metrics'
                type: array
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
      summary: Gets the metrics for Monitoring
      tags:
      - broker-stats
  /broker-stats/topics:
    get:
      operationId: getTopics2
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputStream'
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
      summary: Get all the topic stats by namespace
      tags:
      - broker-stats
  /brokers/configuration:
    get:
      operationId: getDynamicConfigurationName
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  properties: {}
                  type: object
                type: array
          description: successful operation
      summary: Get all updatable dynamic configurations's name
      tags:
      - brokers
  /brokers/configuration/runtime:
    get:
      operationId: getRuntimeConfiguration
      responses:
        200:
          content:
            application/json:
              schema:
                additionalProperties:
                  properties: {}
                  type: object
                type: object
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
      summary: Get all runtime configurations. This operation requires Pulsar super-user
        privileges.
      tags:
      - brokers
  /brokers/configuration/values:
    get:
      operationId: getAllDynamicConfigurations
      responses:
        200:
          content:
            application/json:
              schema:
                additionalProperties:
                  properties: {}
                  type: object
                type: object
          description: successful operation
        404:
          content: {}
          description: Configuration not found
        500:
          content: {}
          description: Internal server error
      summary: Get value of all dynamic configurations' value overridden on local
        config
      tags:
      - brokers
  /brokers/configuration/{configName}/{configValue}:
    post:
      operationId: updateDynamicConfiguration
      parameters:
      - in: path
        name: configName
        required: true
        schema:
          type: string
      - in: path
        name: configValue
        required: true
        schema:
          type: string
      responses:
        204:
          content: {}
          description: Service configuration updated successfully
        403:
          content: {}
          description: You don't have admin permission to update service-configuration
        404:
          content: {}
          description: Configuration not found
        412:
          content: {}
          description: Invalid dynamic-config value
        500:
          content: {}
          description: Internal server error
      summary: Update dynamic serviceconfiguration into zk only. This operation requires
        Pulsar super-user privileges.
      tags:
      - brokers
  /brokers/health:
    get:
      operationId: healthcheck
      responses:
        200:
          content: {}
          description: Everything is OK
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Cluster doesn't exist
        500:
          content: {}
          description: Internal server error
      summary: Run a healthcheck against the broker
      tags:
      - brokers
  /brokers/internal-configuration:
    get:
      operationId: getInternalConfigurationData
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalConfigurationData'
          description: successful operation
      summary: Get the internal configuration data
      tags:
      - brokers
  /brokers/{clusterName}/{broker-webserviceurl}/ownedNamespaces:
    get:
      operationId: getOwnedNamespaes
      parameters:
      - in: path
        name: clusterName
        required: true
        schema:
          type: string
      - in: path
        name: broker-webserviceurl
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/NamespaceOwnershipStatus'
                type: object
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Cluster doesn't exist
      summary: Get the list of namespaces served by the specific broker
      tags:
      - brokers
  /brokers/{cluster}:
    get:
      operationId: getActiveBrokers
      parameters:
      - in: path
        name: cluster
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
        401:
          content: {}
          description: Authentication required
        403:
          content: {}
          description: This operation requires super-user access
        404:
          content: {}
          description: 'Cluster does not exist: cluster={clustername}'
      summary: Get the list of active brokers (web service addresses) in the cluster.If
        authorization is not enabled, any cluster name is valid.
      tags:
      - brokers
  /clusters:
    get:
      operationId: getClusters
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: Return a list of clusters.
        500:
          content: {}
          description: Internal server error.
      summary: Get the list of all the Pulsar clusters.
      tags:
      - clusters
  /clusters/{cluster}:
    delete:
      description: This operation requires Pulsar superuser privileges.
      operationId: deleteCluster
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      responses:
        204:
          content: {}
          description: Cluster has been deleted.
        403:
          content: {}
          description: Don't have admin permission or policies are read-only.
        404:
          content: {}
          description: Cluster doesn't exist.
        412:
          content: {}
          description: Cluster is not empty.
        500:
          content: {}
          description: Internal server error.
      summary: Delete an existing cluster.
      tags:
      - clusters
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getCluster
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterData'
          description: Return the cluster data.
        403:
          content: {}
          description: Don't have admin permission.
        404:
          content: {}
          description: Cluster doesn't exist.
        500:
          content: {}
          description: Internal server error.
      summary: Get the configuration for the specified cluster.
      tags:
      - clusters
    post:
      description: This operation requires Pulsar superuser privileges.
      operationId: updateCluster
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ClusterData'
        description: The cluster data
        required: true
      responses:
        204:
          content: {}
          description: Cluster has been updated.
        403:
          content: {}
          description: Don't have admin permission or policies are read-only.
        404:
          content: {}
          description: Cluster doesn't exist.
        500:
          content: {}
          description: Internal server error.
      summary: Update the configuration for a cluster.
      tags:
      - clusters
      x-codegen-request-body-name: body
    put:
      description: This operation requires Pulsar superuser privileges, and the name
        cannot contain the '/' characters.
      operationId: createCluster
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ClusterData'
        description: The cluster data
        required: true
      responses:
        204:
          content: {}
          description: Cluster has been created.
        403:
          content: {}
          description: You don't have admin permission to create the cluster.
        409:
          content: {}
          description: Cluster already exists.
        412:
          content: {}
          description: Cluster name is not valid.
        500:
          content: {}
          description: Internal server error.
      summary: Create a new cluster.
      tags:
      - clusters
      x-codegen-request-body-name: body
  /clusters/{cluster}/failureDomains:
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getFailureDomains
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/FailureDomain'
                type: object
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        500:
          content: {}
          description: Internal server error
      summary: Get the cluster failure domains.
      tags:
      - clusters
  /clusters/{cluster}/failureDomains/{domainName}:
    delete:
      description: This operation requires Pulsar superuser privileges.
      operationId: deleteFailureDomain
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      - description: The failure domain name
        in: path
        name: domainName
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission or policy is read only
        404:
          content: {}
          description: FailureDomain doesn't exist
        412:
          content: {}
          description: Cluster doesn't exist
        500:
          content: {}
          description: Internal server error
      summary: Delete the failure domain of the cluster
      tags:
      - clusters
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getDomain
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      - description: The failure domain name
        in: path
        name: domainName
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureDomain'
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: FailureDomain doesn't exist
        412:
          content: {}
          description: Cluster doesn't exist
        500:
          content: {}
          description: Internal server error
      summary: Get a domain in a cluster
      tags:
      - clusters
    post:
      description: This operation requires Pulsar superuser privileges.
      operationId: setFailureDomain
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      - description: The failure domain name
        in: path
        name: domainName
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/FailureDomain'
        description: The configuration data of a failure domain
        required: true
      responses:
        403:
          content: {}
          description: Don't have admin permission.
        404:
          content: {}
          description: Failure domain doesn't exist.
        409:
          content: {}
          description: Broker already exists in another domain.
        412:
          content: {}
          description: Cluster doesn't exist.
        500:
          content: {}
          description: Internal server error.
      summary: Set the failure domain of the cluster.
      tags:
      - clusters
      x-codegen-request-body-name: body
  /clusters/{cluster}/namespaceIsolationPolicies:
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getNamespaceIsolationPolicies
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/NamespaceIsolationData'
                type: object
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission.
        404:
          content: {}
          description: Cluster doesn't exist.
        500:
          content: {}
          description: Internal server error.
      summary: Get the namespace isolation policies assigned to the cluster.
      tags:
      - clusters
  /clusters/{cluster}/namespaceIsolationPolicies/brokers:
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getBrokersWithNamespaceIsolationPolicy
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BrokerNamespaceIsolationData'
                type: array
                uniqueItems: true
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission.
        404:
          content: {}
          description: Namespace-isolation policies not found.
        412:
          content: {}
          description: Cluster doesn't exist.
        500:
          content: {}
          description: Internal server error.
      summary: Get list of brokers with namespace-isolation policies attached to them.
      tags:
      - clusters
  /clusters/{cluster}/namespaceIsolationPolicies/brokers/{broker}:
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getBrokerWithNamespaceIsolationPolicy
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      - description: The broker name (<broker-hostname>:<web-service-port>)
        example: broker1:8080
        in: path
        name: broker
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrokerNamespaceIsolationData'
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission.
        404:
          content: {}
          description: Namespace-isolation policies/ Broker not found.
        412:
          content: {}
          description: Cluster doesn't exist.
        500:
          content: {}
          description: Internal server error.
      summary: Get a broker with namespace-isolation policies attached to it.
      tags:
      - clusters
  /clusters/{cluster}/namespaceIsolationPolicies/{policyName}:
    delete:
      description: This operation requires Pulsar superuser privileges.
      operationId: deleteNamespaceIsolationPolicy
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      - description: The namespace isolation policy name
        in: path
        name: policyName
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission or policies are read only.
        404:
          content: {}
          description: Namespace isolation policy doesn't exist.
        412:
          content: {}
          description: Cluster doesn't exist.
        500:
          content: {}
          description: Internal server error.
      summary: Delete namespace isolation policy.
      tags:
      - clusters
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getNamespaceIsolationPolicy
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      - description: The name of the namespace isolation policy
        in: path
        name: policyName
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NamespaceIsolationData'
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission.
        404:
          content: {}
          description: Policy doesn't exist.
        412:
          content: {}
          description: Cluster doesn't exist.
        500:
          content: {}
          description: Internal server error.
      summary: Get the single namespace isolation policy assigned to the cluster.
      tags:
      - clusters
    post:
      description: This operation requires Pulsar superuser privileges.
      operationId: setNamespaceIsolationPolicy
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      - description: The namespace isolation policy name
        in: path
        name: policyName
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NamespaceIsolationData'
        description: The namespace isolation policy data
        required: true
      responses:
        400:
          content: {}
          description: Namespace isolation policy data is invalid.
        403:
          content: {}
          description: Don't have admin permission or policies are read-only.
        404:
          content: {}
          description: Namespace isolation policy doesn't exist.
        412:
          content: {}
          description: Cluster doesn't exist.
        500:
          content: {}
          description: Internal server error.
      summary: Set namespace isolation policy.
      tags:
      - clusters
      x-codegen-request-body-name: body
  /clusters/{cluster}/peers:
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getPeerCluster
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission.
        404:
          content: {}
          description: Cluster doesn't exist.
        500:
          content: {}
          description: Internal server error.
      summary: Get the peer-cluster data for the specified cluster.
      tags:
      - clusters
    post:
      description: This operation requires Pulsar superuser privileges.
      operationId: setPeerClusterNames
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              items:
                type: string
              type: array
        description: The list of peer cluster names
        required: true
      responses:
        204:
          content: {}
          description: Cluster has been updated.
        403:
          content: {}
          description: Don't have admin permission or policies are read-only.
        404:
          content: {}
          description: Cluster doesn't exist.
        412:
          content: {}
          description: Peer cluster doesn't exist.
        500:
          content: {}
          description: Internal server error.
      summary: Update peer-cluster-list for a cluster.
      tags:
      - clusters
      x-codegen-request-body-name: body
  /namespaces/{cluster}/antiAffinity/{group}:
    get:
      operationId: getAntiAffinityNamespaces
      parameters:
      - in: path
        name: cluster
        required: true
        schema:
          type: string
      - in: path
        name: group
        required: true
        schema:
          type: string
      - in: query
        name: tenant
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  properties: {}
                  type: object
                type: array
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        412:
          content: {}
          description: Cluster not exist/Anti-affinity group can't be empty.
      summary: Get all namespaces that are grouped by given anti-affinity group in
        a given cluster. api can be only accessed by admin of any of the existing
        tenant
      tags:
      - namespaces
  /namespaces/{property}/{namespace}/persistence/bookieAffinity:
    delete:
      operationId: deleteBookieAffinityGroup
      parameters:
      - in: path
        name: property
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
        409:
          content: {}
          description: Concurrent modification
      summary: Delete the bookie-affinity-group from namespace-local policy.
      tags:
      - namespaces
    get:
      operationId: getBookieAffinityGroup
      parameters:
      - in: path
        name: property
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookieAffinityGroupData'
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
        409:
          content: {}
          description: Concurrent modification
      summary: Get the bookie-affinity-group from namespace-local policy.
      tags:
      - namespaces
  /namespaces/{tenant}:
    get:
      operationId: getTenantNamespaces
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant doesn't exist
      summary: Get the list of all the namespaces for a certain tenant.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}:
    delete:
      operationId: deleteNamespace
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        409:
          content: {}
          description: Namespace is not empty
      summary: Delete a namespace and all the topics under it.
      tags:
      - namespaces
    get:
      operationId: getPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policies'
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Get the dump all the policies specified for a namespace.
      tags:
      - namespaces
    put:
      operationId: createNamespace
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant or cluster doesn't exist
        409:
          content: {}
          description: Namespace already exists
        412:
          content: {}
          description: Namespace name is not valid
      summary: Creates a new namespace with the specified policies
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/antiAffinity:
    delete:
      operationId: removeNamespaceAntiAffinityGroup
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
        409:
          content: {}
          description: Concurrent modification
      summary: Remove anti-affinity group of a namespace.
      tags:
      - namespaces
    get:
      operationId: getNamespaceAntiAffinityGroup
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                type: string
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Get anti-affinity group of a namespace.
      tags:
      - namespaces
    post:
      operationId: setNamespaceAntiAffinityGroup
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        412:
          content: {}
          description: Invalid antiAffinityGroup
      summary: Set anti-affinity group for a namespace
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/backlogQuota:
    delete:
      operationId: removeBacklogQuota
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: query
        name: backlogQuotaType
        schema:
          enum:
          - destination_storage
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
        409:
          content: {}
          description: Concurrent modification
      summary: Remove a backlog quota policy from a namespace.
      tags:
      - namespaces
    post:
      operationId: setBacklogQuota
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: query
        name: backlogQuotaType
        schema:
          enum:
          - destination_storage
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
        409:
          content: {}
          description: Concurrent modification
        412:
          content: {}
          description: Specified backlog quota exceeds retention quota. Increase retention
            quota and retry request
      summary: ' Set a backlog quota for all the topics on a namespace.'
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/backlogQuotaMap:
    get:
      operationId: getBacklogQuotaMap
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                additionalProperties:
                  properties: {}
                  type: object
                type: object
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
      summary: Get backlog quota map on a namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/bundles:
    get:
      operationId: getBundlesData
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BundlesData'
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        412:
          content: {}
          description: Namespace is not setup to split in bundles
      summary: Get the bundles split data.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/clearBacklog:
    post:
      operationId: clearNamespaceBacklog
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
      summary: Clear backlog for all topics on a namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/clearBacklog/{subscription}:
    post:
      operationId: clearNamespaceBacklogForSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: subscription
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
      summary: Clear backlog for a given subscription on all topics on a namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/compactionThreshold:
    get:
      description: The backlog size is compared to the threshold periodically. A threshold
        of 0 disabled automatic compaction
      operationId: getCompactionThreshold
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace doesn't exist
      summary: Maximum number of uncompacted bytes in topics before compaction is
        triggered.
      tags:
      - namespaces
    put:
      description: The backlog size is compared to the threshold periodically. A threshold
        of 0 disabled automatic compaction
      operationId: setCompactionThreshold
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace doesn't exist
        409:
          content: {}
          description: Concurrent modification
        412:
          content: {}
          description: compactionThreshold value is not valid
      summary: Set maximum number of uncompacted bytes in a topic before compaction
        is triggered.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/deduplication:
    post:
      operationId: modifyDeduplication
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Enable or disable broker side deduplication for all topics in a namespace
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/dispatchRate:
    get:
      operationId: getDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DispatchRate'
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
      summary: Get dispatch-rate configured for the namespace, -1 represents not configured
        yet
      tags:
      - namespaces
    post:
      operationId: setDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
      summary: Set dispatch-rate throttling for all topics of the namespace
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/encryptionRequired:
    post:
      operationId: modifyEncryptionRequired
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        409:
          content: {}
          description: Concurrent modification
      summary: Message encryption is required or not for all topics in a namespace
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/maxConsumersPerSubscription:
    get:
      operationId: getMaxConsumersPerSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
      summary: Get maxConsumersPerSubscription config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setMaxConsumersPerSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
        409:
          content: {}
          description: Concurrent modification
        412:
          content: {}
          description: maxConsumersPerSubscription value is not valid
      summary: ' Set maxConsumersPerSubscription configuration on a namespace.'
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/maxConsumersPerTopic:
    get:
      operationId: getMaxConsumersPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
      summary: Get maxConsumersPerTopic config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setMaxConsumersPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
        409:
          content: {}
          description: Concurrent modification
        412:
          content: {}
          description: maxConsumersPerTopic value is not valid
      summary: ' Set maxConsumersPerTopic configuration on a namespace.'
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/maxProducersPerTopic:
    get:
      operationId: getMaxProducersPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
      summary: Get maxProducersPerTopic config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setMaxProducersPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
        409:
          content: {}
          description: Concurrent modification
        412:
          content: {}
          description: maxProducersPerTopic value is not valid
      summary: ' Set maxProducersPerTopic configuration on a namespace.'
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/messageTTL:
    get:
      operationId: getNamespaceMessageTTL
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Get the message TTL for the namespace
      tags:
      - namespaces
    post:
      operationId: setNamespaceMessageTTL
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        412:
          content: {}
          description: Invalid TTL
      summary: Set message TTL in seconds for namespace
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/offloadDeletionLagMs:
    delete:
      operationId: clearOffloadDeletionLag
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace doesn't exist
        409:
          content: {}
          description: Concurrent modification
      summary: Clear the namespace configured offload deletion lag. The topics in
        the namespace will fallback to using the default configured deletion lag for
        the broker
      tags:
      - namespaces
    get:
      description: A negative value denotes that deletion has been completely disabled.
        'null' denotes that the topics in the namespace will fall back to the broker
        default for deletion lag.
      operationId: getOffloadDeletionLag
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace doesn't exist
      summary: Number of milliseconds to wait before deleting a ledger segment which
        has been offloaded from the Pulsar cluster's local storage (i.e. BookKeeper)
      tags:
      - namespaces
    put:
      description: A negative value disables the deletion completely.
      operationId: setOffloadDeletionLag
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace doesn't exist
        409:
          content: {}
          description: Concurrent modification
        412:
          content: {}
          description: offloadDeletionLagMs value is not valid
      summary: Set number of milliseconds to wait before deleting a ledger segment
        which has been offloaded from the Pulsar cluster's local storage (i.e. BookKeeper)
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/offloadThreshold:
    get:
      description: A negative value disables automatic offloading
      operationId: getOffloadThreshold
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace doesn't exist
      summary: Maximum number of bytes stored on the pulsar cluster for a topic, before
        the broker will start offloading to longterm storage
      tags:
      - namespaces
    put:
      description: A negative value disables automatic offloading
      operationId: setOffloadThreshold
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace doesn't exist
        409:
          content: {}
          description: Concurrent modification
        412:
          content: {}
          description: offloadThreshold value is not valid
      summary: Set maximum number of bytes stored on the pulsar cluster for a topic,
        before the broker will start offloading to longterm storage
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/permissions:
    get:
      operationId: getPermissions
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: cluster
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                additionalProperties:
                  properties: {}
                  type: object
                type: object
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        409:
          content: {}
          description: Namespace is not empty
      summary: Retrieve the permissions for a namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/permissions/{role}:
    delete:
      operationId: revokePermissionsOnNamespace
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: role
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Revoke all permissions to a role on a namespace.
      tags:
      - namespaces
    post:
      operationId: grantPermissionOnNamespace
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: role
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        409:
          content: {}
          description: Concurrent modification
        501:
          content: {}
          description: Authorization is not enabled
      summary: Grant a new permission to a role on a namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/persistence:
    get:
      operationId: getPersistence
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistencePolicies'
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
        409:
          content: {}
          description: Concurrent modification
      summary: Get the persistence configuration for a namespace.
      tags:
      - namespaces
    post:
      operationId: setPersistence
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        400:
          content: {}
          description: Invalid persistence policies
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
        409:
          content: {}
          description: Concurrent modification
      summary: Set the persistence configuration for all the topics on a namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/persistence/bookieAffinity:
    post:
      operationId: setBookieAffinityGroup
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
        409:
          content: {}
          description: Concurrent modification
      summary: Set the bookie-affinity-group to namespace-persistent policy.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/replication:
    get:
      operationId: getNamespaceReplicationClusters
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        412:
          content: {}
          description: Namespace is not global
      summary: Get the replication clusters for a namespace.
      tags:
      - namespaces
    post:
      operationId: setNamespaceReplicationClusters
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        409:
          content: {}
          description: Peer-cluster can't be part of replication-cluster
        412:
          content: {}
          description: Namespace is not global or invalid cluster ids
      summary: Set the replication clusters for a namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/replicatorDispatchRate:
    get:
      operationId: getReplicatorDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DispatchRate'
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
      summary: Get replicator dispatch-rate configured for the namespace, -1 represents
        not configured yet
      tags:
      - namespaces
    post:
      operationId: setReplicatorDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
      summary: Set replicator dispatch-rate throttling for all topics of the namespace
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/retention:
    get:
      operationId: getRetention
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetentionPolicies'
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
      summary: Get retention config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setRetention
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
        409:
          content: {}
          description: Concurrent modification
        412:
          content: {}
          description: Retention Quota must exceed backlog quota
      summary: ' Set retention configuration on a namespace.'
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/schemaAutoUpdateCompatibilityStrategy:
    get:
      description: The value AutoUpdateDisabled prevents producers from updating the
        schema.  If set to AutoUpdateDisabled, schemas must be updated through the
        REST api
      operationId: getSchemaAutoUpdateCompatibilityStrategy
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                enum:
                - AutoUpdateDisabled
                - Backward
                - Forward
                - Full
                - AlwaysCompatible
                - BackwardTransitive
                - ForwardTransitive
                - FullTransitive
                type: string
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace doesn't exist
        409:
          content: {}
          description: Concurrent modification
      summary: The strategy used to check the compatibility of new schemas, provided
        by producers, before automatically updating the schema
      tags:
      - namespaces
    put:
      description: The value AutoUpdateDisabled prevents producers from updating the
        schema.  If set to AutoUpdateDisabled, schemas must be updated through the
        REST api
      operationId: setSchemaAutoUpdateCompatibilityStrategy
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace doesn't exist
        409:
          content: {}
          description: Concurrent modification
      summary: Update the strategy used to check the compatibility of new schemas,
        provided by producers, before automatically updating the schema
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/schemaValidationEnforced:
    get:
      description: If the flag is set to true, when a producer without a schema attempts
        to produce to a topic with schema in this namespace, the producer will be
        failed to connect. PLEASE be carefully on using this, since non-java clients
        don't support schema.if you enable this setting, it will cause non-java clients
        failed to produce.
      operationId: getSchemaValidtionEnforced
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                type: boolean
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenants or Namespace doesn't exist
      summary: Get schema validation enforced flag for namespace.
      tags:
      - namespaces
    post:
      description: If the flag is set to true, when a producer without a schema attempts
        to produce to a topic with schema in this namespace, the producer will be
        failed to connect. PLEASE be carefully on using this, since non-java clients
        don't support schema.if you enable this setting, it will cause non-java clients
        failed to produce.
      operationId: setSchemaValidtionEnforced
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant or Namespace doesn't exist
        412:
          content: {}
          description: schemaValidationEnforced value is not valid
      summary: Set schema validation enforced flag on namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/subscribeRate:
    get:
      operationId: getSubscribeRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscribeRate'
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
      summary: Get subscribe-rate configured for the namespace
      tags:
      - namespaces
    post:
      operationId: setSubscribeRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
      summary: Set subscribe-rate throttling for all topics of the namespace
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/subscriptionAuthMode:
    post:
      operationId: setSubscriptionAuthMode
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
        409:
          content: {}
          description: Concurrent modification
      summary: ' Set a subscription auth mode for all the topics on a namespace.'
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/subscriptionDispatchRate:
    get:
      operationId: getSubscriptionDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DispatchRate'
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
      summary: Get Subscription dispatch-rate configured for the namespace, -1 represents
        not configured yet
      tags:
      - namespaces
    post:
      operationId: setSubscriptionDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
      summary: Set Subscription dispatch-rate throttling for all topics of the namespace
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/topics:
    get:
      operationId: getTopics
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: query
        name: mode
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - NON_PERSISTENT
          - ALL
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Get the list of all the topics under a certain namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/unload:
    put:
      description: Unload an active namespace from the current broker serving it.
        Performing this operation will let the brokerremoves all producers, consumers,
        and connections using this namespace, and close all topics (includingtheir
        persistent store). During that operation, the namespace is marked as tentatively
        unavailable until thebroker completes the unloading action. This operation
        requires strictly super user privileges, since it wouldresult in non-persistent
        message loss and unexpected connection closure to the clients.
      operationId: unloadNamespace
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant or namespace doesn't exist
        412:
          content: {}
          description: Namespace is already unloaded or Namespace has bundles activated
      summary: Unload namespace
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/unsubscribe/{subscription}:
    post:
      operationId: unsubscribeNamespace
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: cluster
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: subscription
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
      summary: Unsubscribes the given subscription on all topics on a namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/{bundle}:
    delete:
      operationId: deleteNamespaceBundle
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: bundle
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        409:
          content: {}
          description: Namespace bundle is not empty
      summary: Delete a namespace bundle and all the topics under it.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/{bundle}/clearBacklog:
    post:
      operationId: clearNamespaceBundleBacklog
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: bundle
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
      summary: Clear backlog for all topics on a namespace bundle.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/{bundle}/clearBacklog/{subscription}:
    post:
      operationId: clearNamespaceBundleBacklogForSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: subscription
        required: true
        schema:
          type: string
      - in: path
        name: bundle
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
      summary: Clear backlog for a given subscription on all topics on a namespace
        bundle.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/{bundle}/split:
    put:
      operationId: splitNamespaceBundle
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: bundle
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - in: query
        name: unload
        schema:
          default: false
          type: boolean
      responses:
        403:
          content: {}
          description: Don't have admin permission
      summary: Split a namespace bundle
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/{bundle}/unload:
    put:
      operationId: unloadNamespaceBundle
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: bundle
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        403:
          content: {}
          description: Don't have admin permission
      summary: Unload a namespace bundle
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/{bundle}/unsubscribe/{subscription}:
    post:
      operationId: unsubscribeNamespaceBundle
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: subscription
        required: true
        schema:
          type: string
      - in: path
        name: bundle
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
      summary: Unsubscribes the given subscription on all topics on a namespace bundle.
      tags:
      - namespaces
  /non-persistent/{tenant}/{namespace}:
    get:
      operationId: getList
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace doesn't exist
      summary: Get the list of non-persistent topics under a namespace.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/partitioned:
    get:
      operationId: getPartitionedTopicList
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: tenant/namespace/topic doesn't exit
        412:
          content: {}
          description: Namespace name is not valid
        500:
          content: {}
          description: Internal server error
      summary: Get the list of partitioned topics under a namespace.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{bundle}:
    get:
      operationId: getListFromBundle
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: bundle
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace doesn't exist
      summary: Get the list of non-persistent topics under a namespace bundle.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}:
    delete:
      description: The topic cannot be deleted if delete is not forcefully and there's
        any active subscription or producer connected to the it. Force delete ignores
        connected clients and deletes topic by explicitly closing them.
      operationId: deleteTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Stop all producer/consumer/replicator and delete topic forcefully
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        412:
          content: {}
          description: Topic has active producers/subscriptions
        500:
          content: {}
          description: Internal server error
      summary: Delete a topic.
      tags:
      - non-persistent topic
    put:
      description: This is the only REST endpoint from which non-partitioned topics
        could be created.
      operationId: createNonPartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        409:
          content: {}
          description: Partitioned topic already exist
        412:
          content: {}
          description: 'Failed Reason : Name is invalid or Namespace does not have
            any clusters configured'
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Create a non-partitioned topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/all_subscription/expireMessages/{expireTimeInSeconds}:
    post:
      operationId: expireMessagesForAllSubscriptions
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Expires beyond the specified number of seconds
        in: path
        name: expireTimeInSeconds
        required: true
        schema:
          default: 0
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic or subscription does not exist
        405:
          content: {}
          description: Expiry messages on a non-persistent topic is not allowed
        412:
          content: {}
          description: Can't find owner for topic
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Expiry messages on all subscriptions of topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/backlog:
    get:
      operationId: getBacklog
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistentOfflineTopicStats'
          description: successful operation
        404:
          content: {}
          description: Namespace does not exist
        412:
          content: {}
          description: Topic name is not valid
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get estimated backlog for offline topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/compaction:
    get:
      operationId: compactionStatus
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongRunningProcessStatus'
          description: successful operation
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist, or compaction hasn't run
        405:
          content: {}
          description: Operation is not allowed on the persistent topic
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the status of a compaction operation for a topic.
      tags:
      - non-persistent topic
    put:
      operationId: compact
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        405:
          content: {}
          description: Operation is not allowed on the persistent topic
        409:
          content: {}
          description: Compaction already running
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Trigger a compaction operation on a topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/internal-info:
    get:
      operationId: getManagedLedgerInfo
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the internal stats for the topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/internalStats:
    get:
      operationId: getInternalStats
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistentTopicInternalStats'
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
      summary: Get the internal stats for the topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/lastMessageId:
    get:
      operationId: getLastMessageId
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageId'
          description: successful operation
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        405:
          content: {}
          description: Operation is not allowed on the persistent topic
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Return the last commit message id of topic
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/offload:
    get:
      operationId: offloadStatus
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OffloadProcessStatus'
          description: successful operation
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        405:
          content: {}
          description: Operation is not allowed on the persistent topic
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Offload a prefix of a topic to long term storage
      tags:
      - non-persistent topic
    put:
      operationId: triggerOffload
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        405:
          content: {}
          description: Operation is not allowed on the persistent topic
        409:
          content: {}
          description: Offload already running
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Offload a prefix of a topic to long term storage
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/partitioned-stats:
    get:
      operationId: getPartitionedStats
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        412:
          content: {}
          description: Partitioned topic name is invalid
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the stats for the partitioned topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/partitions:
    delete:
      description: It will also delete all the partitions of the topic if it exists.
      operationId: deletePartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Stop all producer/consumer/replicator and delete topic forcefully
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Partitioned topic does not exist
        409:
          content: {}
          description: Concurrent modification
        412:
          content: {}
          description: Partitioned topic name is invalid
        500:
          content: {}
          description: Internal server error
      summary: Delete a partitioned topic.
      tags:
      - non-persistent topic
    get:
      operationId: getPartitionedMetadata
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartitionedTopicMetadata'
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
      summary: Get partitioned topic metadata.
      tags:
      - non-persistent topic
    post:
      description: It only increments partitions of existing non-global partitioned-topic
      operationId: updatePartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              default: 0
              format: int32
              type: integer
        description: The number of partitions for the topic
        required: true
      responses:
        401:
          content: {}
          description: Don't have permission to adminisActions to be grantedtrate
            resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant does not exist
        406:
          content: {}
          description: The number of partitions should be more than 1
        409:
          content: {}
          description: Partitioned topic does not exist
        412:
          content: {}
          description: Partitioned topic name is invalid
        500:
          content: {}
          description: Internal server error
      summary: Increment partitons of an existing partitioned topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
    put:
      description: It needs to be called before creating a producer on a partitioned
        topic.
      operationId: createPartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              default: 0
              format: int32
              type: integer
        description: The number of partitions for the topic
        required: true
      responses:
        403:
          content: {}
          description: Don't have admin permission
        409:
          content: {}
          description: Partitioned topic already exists
        412:
          content: {}
          description: 'Failed Reason : Name is invalid or Namespace does not have
            any clusters configured'
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Create a partitioned topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/permissions:
    get:
      description: Retrieve the effective permissions for a topic. These permissions
        are defined by the permissions set at thenamespace level combined (union)
        with any eventual specific permission set on the topic.
      operationId: getPermissionsOnTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                additionalProperties:
                  properties: {}
                  type: object
                type: object
          description: successful operation
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: tenant/namespace/topic doesn't exit
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
      summary: Get permissions on a topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/permissions/{role}:
    delete:
      description: Revoke permissions to a role on a single topic. If the permission
        was not set at the topiclevel, but rather at the namespace level, this operation
        will return an error (HTTP status code 412).
      operationId: revokePermissionsOnTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Client role to which grant permissions
        in: path
        name: role
        required: true
        schema:
          type: string
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: tenant/namespace/topic doesn't exit
        412:
          content: {}
          description: Permissions are not set at the topic level
        500:
          content: {}
          description: Internal server error
      summary: Revoke permissions on a topic.
      tags:
      - non-persistent topic
    post:
      operationId: grantPermissionsOnTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Client role to which grant permissions
        in: path
        name: role
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              items:
                enum:
                - produce
                - consume
                - functions
                type: string
              type: array
        description: Actions to be granted (produce,functions,consume)
        required: false
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: tenant/namespace/topic doesn't exit
        409:
          content: {}
          description: Concurrent modification
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
      summary: Grant a new permission to a role on a single topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/stats:
    get:
      operationId: getStats
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicStats'
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
      summary: Get the stats for the topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}:
    delete:
      description: There should not be any active consumers on the subscription.
      operationId: deleteSubscription
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to be deleted
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        412:
          content: {}
          description: Subscription has active consumers
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Delete a subscription.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/expireMessages/{expireTimeInSeconds}:
    post:
      operationId: expireTopicMessages
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to be Expiry messages on
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Expires beyond the specified number of seconds
        in: path
        name: expireTimeInSeconds
        required: true
        schema:
          default: 0
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic or subscription does not exist
        405:
          content: {}
          description: Expiry messages on a non-persistent topic is not allowed
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Expiry messages on a topic subscription.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/position/{messagePosition}:
    get:
      operationId: peekNthMessage
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscribed message expired
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: The number of messages (default 1)
        in: path
        name: messagePosition
        required: true
        schema:
          default: 1
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic, subscription or the message position does not exist
        405:
          content: {}
          description: Skipping messages on a non-persistent topic is not allowed
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Peek nth message on a topic subscription.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/resetcursor:
    post:
      description: It fence cursor and disconnects all active consumers before reseting
        cursor.
      operationId: resetCursorOnPosition
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to reset position on
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/MessageIdImpl'
        description: messageId to reset back to (ledgerId:entryId)
        required: false
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic/Subscription does not exist
        405:
          content: {}
          description: Not supported for partitioned topics
        412:
          content: {}
          description: Unable to find position for position specified
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Reset subscription to message position closest to given position.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: messageId
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/resetcursor/{timestamp}:
    post:
      description: It fence cursor and disconnects all active consumers before reseting
        cursor.
      operationId: resetCursor
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to reset position on
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: time in minutes to reset back to (or minutes, hours,days,weeks
          eg:100m, 3h, 2d, 5w)
        in: path
        name: timestamp
        required: true
        schema:
          format: int64
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic/Subscription does not exist
        405:
          content: {}
          description: Method Not Allowed
        412:
          content: {}
          description: Failed to reset cursor on subscription or Unable to find position
            for timestamp specified
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Reset subscription to message position closest to absolute timestamp
        (in ms).
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/skip/{numMessages}:
    post:
      operationId: skipMessages
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Name of subscription
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: The number of messages to skip
        in: path
        name: numMessages
        required: true
        schema:
          default: 0
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic or subscription does not exist
        405:
          content: {}
          description: Skipping messages on a partitioned topic is not allowed
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Skipping messages on a topic subscription.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/skip_all:
    post:
      description: Completely clears the backlog on the subscription.
      operationId: skipAllMessages
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Name of subscription
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic or subscription does not exist
        405:
          content: {}
          description: Operation not allowed on non-persistent topic
        412:
          content: {}
          description: Can't find owner for topic
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Skip all messages on a topic subscription.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subscriptionName}:
    put:
      description: Creates a subscription on the topic at the specified message id
      operationId: createSubscription
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to create position on
        in: path
        name: subscriptionName
        required: true
        schema:
          type: string
      - description: messageId where to create the subscription. It can be 'latest',
          'earliest' or (ledgerId:entryId)
        in: query
        name: authoritative
        schema:
          default: false
          enum:
          - false
          - false
          - false
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: replicated
        schema:
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic/Subscription does not exist
        405:
          content: {}
          description: Not supported for partitioned topics
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Reset subscription to message position closest to given position.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/subscriptions:
    get:
      operationId: getSubscriptions
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  properties: {}
                  type: object
                type: array
          description: successful operation
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the list of persistent subscriptions for a given topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/terminate:
    post:
      operationId: terminate
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageId'
          description: successful operation
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        405:
          content: {}
          description: Termination of a partitioned topic is not allowed
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Terminate a topic. A topic that is terminated will not accept any more
        messages to be published and will let consumer to drain existing messages
        in backlog
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/unload:
    put:
      operationId: unloadTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
      summary: Unload a topic
      tags:
      - non-persistent topic
  /persistent/{tenant}/{namespace}:
    get:
      operationId: getList
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: tenant/namespace/topic doesn't exit
        412:
          content: {}
          description: Namespace name is not valid
        500:
          content: {}
          description: Internal server error
      summary: Get the list of topics under a namespace.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/partitioned:
    get:
      operationId: getPartitionedTopicList
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: tenant/namespace/topic doesn't exit
        412:
          content: {}
          description: Namespace name is not valid
        500:
          content: {}
          description: Internal server error
      summary: Get the list of partitioned topics under a namespace.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}:
    delete:
      description: The topic cannot be deleted if delete is not forcefully and there's
        any active subscription or producer connected to the it. Force delete ignores
        connected clients and deletes topic by explicitly closing them.
      operationId: deleteTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Stop all producer/consumer/replicator and delete topic forcefully
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        412:
          content: {}
          description: Topic has active producers/subscriptions
        500:
          content: {}
          description: Internal server error
      summary: Delete a topic.
      tags:
      - persistent topic
    put:
      description: This is the only REST endpoint from which non-partitioned topics
        could be created.
      operationId: createNonPartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        409:
          content: {}
          description: Partitioned topic already exist
        412:
          content: {}
          description: 'Failed Reason : Name is invalid or Namespace does not have
            any clusters configured'
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Create a non-partitioned topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/all_subscription/expireMessages/{expireTimeInSeconds}:
    post:
      operationId: expireMessagesForAllSubscriptions
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Expires beyond the specified number of seconds
        in: path
        name: expireTimeInSeconds
        required: true
        schema:
          default: 0
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic or subscription does not exist
        405:
          content: {}
          description: Expiry messages on a non-persistent topic is not allowed
        412:
          content: {}
          description: Can't find owner for topic
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Expiry messages on all subscriptions of topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/backlog:
    get:
      operationId: getBacklog
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistentOfflineTopicStats'
          description: successful operation
        404:
          content: {}
          description: Namespace does not exist
        412:
          content: {}
          description: Topic name is not valid
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get estimated backlog for offline topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/compaction:
    get:
      operationId: compactionStatus
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongRunningProcessStatus'
          description: successful operation
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist, or compaction hasn't run
        405:
          content: {}
          description: Operation is not allowed on the persistent topic
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the status of a compaction operation for a topic.
      tags:
      - persistent topic
    put:
      operationId: compact
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        405:
          content: {}
          description: Operation is not allowed on the persistent topic
        409:
          content: {}
          description: Compaction already running
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Trigger a compaction operation on a topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/internal-info:
    get:
      operationId: getManagedLedgerInfo
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the internal stats for the topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/internalStats:
    get:
      operationId: getInternalStats
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistentTopicInternalStats'
          description: successful operation
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the internal stats for the topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/lastMessageId:
    get:
      operationId: getLastMessageId
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageId'
          description: successful operation
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        405:
          content: {}
          description: Operation is not allowed on the persistent topic
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Return the last commit message id of topic
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/offload:
    get:
      operationId: offloadStatus
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OffloadProcessStatus'
          description: successful operation
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        405:
          content: {}
          description: Operation is not allowed on the persistent topic
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Offload a prefix of a topic to long term storage
      tags:
      - persistent topic
    put:
      operationId: triggerOffload
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        405:
          content: {}
          description: Operation is not allowed on the persistent topic
        409:
          content: {}
          description: Offload already running
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Offload a prefix of a topic to long term storage
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/partitioned-stats:
    get:
      operationId: getPartitionedStats
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        412:
          content: {}
          description: Partitioned topic name is invalid
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the stats for the partitioned topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/partitions:
    delete:
      description: It will also delete all the partitions of the topic if it exists.
      operationId: deletePartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Stop all producer/consumer/replicator and delete topic forcefully
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Partitioned topic does not exist
        409:
          content: {}
          description: Concurrent modification
        412:
          content: {}
          description: Partitioned topic name is invalid
        500:
          content: {}
          description: Internal server error
      summary: Delete a partitioned topic.
      tags:
      - persistent topic
    get:
      operationId: getPartitionedMetadata
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartitionedTopicMetadata'
          description: successful operation
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant does not exist
        409:
          content: {}
          description: Concurrent modification
        412:
          content: {}
          description: Partitioned topic name is invalid
        500:
          content: {}
          description: Internal server error
      summary: Get partitioned topic metadata.
      tags:
      - persistent topic
    post:
      description: It only increments partitions of existing non-global partitioned-topic
      operationId: updatePartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              default: 0
              format: int32
              type: integer
        description: The number of partitions for the topic
        required: true
      responses:
        401:
          content: {}
          description: Don't have permission to adminisActions to be grantedtrate
            resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant does not exist
        406:
          content: {}
          description: The number of partitions should be more than 1
        409:
          content: {}
          description: Partitioned topic does not exist
        412:
          content: {}
          description: Partitioned topic name is invalid
        500:
          content: {}
          description: Internal server error
      summary: Increment partitons of an existing partitioned topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
    put:
      description: It needs to be called before creating a producer on a partitioned
        topic.
      operationId: createPartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              default: 0
              format: int32
              type: integer
        description: The number of partitions for the topic
        required: true
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Tenant does not exist
        409:
          content: {}
          description: Partitioned topic already exist
        412:
          content: {}
          description: 'Failed Reason : Name is invalid or Namespace does not have
            any clusters configured'
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Create a partitioned topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/permissions:
    get:
      description: Retrieve the effective permissions for a topic. These permissions
        are defined by the permissions set at thenamespace level combined (union)
        with any eventual specific permission set on the topic.
      operationId: getPermissionsOnTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                additionalProperties:
                  properties: {}
                  type: object
                type: object
          description: successful operation
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: tenant/namespace/topic doesn't exit
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
      summary: Get permissions on a topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/permissions/{role}:
    delete:
      description: Revoke permissions to a role on a single topic. If the permission
        was not set at the topiclevel, but rather at the namespace level, this operation
        will return an error (HTTP status code 412).
      operationId: revokePermissionsOnTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Client role to which grant permissions
        in: path
        name: role
        required: true
        schema:
          type: string
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: tenant/namespace/topic doesn't exit
        412:
          content: {}
          description: Permissions are not set at the topic level
        500:
          content: {}
          description: Internal server error
      summary: Revoke permissions on a topic.
      tags:
      - persistent topic
    post:
      operationId: grantPermissionsOnTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Client role to which grant permissions
        in: path
        name: role
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              items:
                enum:
                - produce
                - consume
                - functions
                type: string
              type: array
        description: Actions to be granted (produce,functions,consume)
        required: false
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: tenant/namespace/topic doesn't exit
        409:
          content: {}
          description: Concurrent modification
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
      summary: Grant a new permission to a role on a single topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/stats:
    get:
      operationId: getStats
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicStats'
          description: successful operation
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the stats for the topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}:
    delete:
      description: There should not be any active consumers on the subscription.
      operationId: deleteSubscription
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to be deleted
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        412:
          content: {}
          description: Subscription has active consumers
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Delete a subscription.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/expireMessages/{expireTimeInSeconds}:
    post:
      operationId: expireTopicMessages
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to be Expiry messages on
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Expires beyond the specified number of seconds
        in: path
        name: expireTimeInSeconds
        required: true
        schema:
          default: 0
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic or subscription does not exist
        405:
          content: {}
          description: Expiry messages on a non-persistent topic is not allowed
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Expiry messages on a topic subscription.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/position/{messagePosition}:
    get:
      operationId: peekNthMessage
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscribed message expired
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: The number of messages (default 1)
        in: path
        name: messagePosition
        required: true
        schema:
          default: 1
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic, subscription or the message position does not exist
        405:
          content: {}
          description: Skipping messages on a non-persistent topic is not allowed
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Peek nth message on a topic subscription.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/resetcursor:
    post:
      description: It fence cursor and disconnects all active consumers before reseting
        cursor.
      operationId: resetCursorOnPosition
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to reset position on
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/MessageIdImpl'
        description: messageId to reset back to (ledgerId:entryId)
        required: false
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic/Subscription does not exist
        405:
          content: {}
          description: Not supported for partitioned topics
        412:
          content: {}
          description: Unable to find position for position specified
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Reset subscription to message position closest to given position.
      tags:
      - persistent topic
      x-codegen-request-body-name: messageId
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/resetcursor/{timestamp}:
    post:
      description: It fence cursor and disconnects all active consumers before reseting
        cursor.
      operationId: resetCursor
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to reset position on
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: time in minutes to reset back to (or minutes, hours,days,weeks
          eg:100m, 3h, 2d, 5w)
        in: path
        name: timestamp
        required: true
        schema:
          format: int64
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic/Subscription does not exist
        405:
          content: {}
          description: Method Not Allowed
        412:
          content: {}
          description: Failed to reset cursor on subscription or Unable to find position
            for timestamp specified
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Reset subscription to message position closest to absolute timestamp
        (in ms).
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/skip/{numMessages}:
    post:
      operationId: skipMessages
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Name of subscription
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: The number of messages to skip
        in: path
        name: numMessages
        required: true
        schema:
          default: 0
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic or subscription does not exist
        405:
          content: {}
          description: Skipping messages on a partitioned topic is not allowed
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Skipping messages on a topic subscription.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/skip_all:
    post:
      description: Completely clears the backlog on the subscription.
      operationId: skipAllMessages
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Name of subscription
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic or subscription does not exist
        405:
          content: {}
          description: Operation not allowed on non-persistent topic
        412:
          content: {}
          description: Can't find owner for topic
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Skip all messages on a topic subscription.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subscriptionName}:
    put:
      description: Creates a subscription on the topic at the specified message id
      operationId: createSubscription
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to create position on
        in: path
        name: subscriptionName
        required: true
        schema:
          type: string
      - description: messageId where to create the subscription. It can be 'latest',
          'earliest' or (ledgerId:entryId)
        in: query
        name: authoritative
        schema:
          default: false
          enum:
          - false
          - false
          - false
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: replicated
        schema:
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic/Subscription does not exist
        405:
          content: {}
          description: Not supported for partitioned topics
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Reset subscription to message position closest to given position.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/subscriptions:
    get:
      operationId: getSubscriptions
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  properties: {}
                  type: object
                type: array
          description: successful operation
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the list of persistent subscriptions for a given topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/terminate:
    post:
      operationId: terminate
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageId'
          description: successful operation
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        405:
          content: {}
          description: Termination of a partitioned topic is not allowed
        412:
          content: {}
          description: Topic name is not valid
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Terminate a topic. A topic that is terminated will not accept any more
        messages to be published and will let consumer to drain existing messages
        in backlog
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/unload:
    put:
      operationId: unloadTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        401:
          content: {}
          description: Don't have permission to administrate resources on this tenant
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Topic does not exist
        409:
          content: {}
          description: Concurrent modification
        412:
          content: {}
          description: Topic name is not valid or can't find owner for topic
        500:
          content: {}
          description: Internal server error
        503:
          content: {}
          description: Failed to validate global cluster configuration
      summary: Unload a topic
      tags:
      - persistent topic
  /resource-quotas:
    get:
      operationId: getDefaultResourceQuota
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
      summary: Get the default quota
      tags:
      - resource-quotas
    post:
      operationId: setDefaultResourceQuota
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
      summary: Set the default quota
      tags:
      - resource-quotas
  /resource-quotas/{tenant}/{namespace}/{bundle}:
    delete:
      operationId: removeNamespaceBundleResourceQuota
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: bundle
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        409:
          content: {}
          description: Concurrent modification
      summary: Remove resource quota for a namespace.
      tags:
      - resource-quotas
    get:
      operationId: getNamespaceBundleResourceQuota
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: bundle
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceQuota'
          description: successful operation
        403:
          content: {}
          description: Don't have admin permission
        404:
          content: {}
          description: Namespace does not exist
      summary: Get resource quota of a namespace bundle.
      tags:
      - resource-quotas
    post:
      operationId: setNamespaceBundleResourceQuota
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: bundle
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: Don't have admin permission
        409:
          content: {}
          description: Concurrent modification
      summary: Set resource quota on a namespace.
      tags:
      - resource-quotas
  /schemas/{tenant}/{namespace}/{topic}/schema:
    delete:
      operationId: deleteSchema
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSchemaResponse'
          description: successful operation
        307:
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        401:
          content: {}
          description: Client is not authorized or Don't have admin permission
        403:
          content: {}
          description: Client is not authenticated
        404:
          content: {}
          description: Tenant or Namespace or Topic doesn't exist
        412:
          content: {}
          description: Failed to find the ownership for the topic
      summary: Delete the schema of a topic
      tags:
      - schemas
    get:
      operationId: getSchema
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSchemaResponse'
          description: successful operation
        307:
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        401:
          content: {}
          description: Client is not authorized or Don't have admin permission
        403:
          content: {}
          description: Client is not authenticated
        404:
          content: {}
          description: Tenant or Namespace or Topic doesn't exist; or Schema is not
            found for this topic
        412:
          content: {}
          description: Failed to find the ownership for the topic
      summary: Get the schema of a topic
      tags:
      - schemas
    post:
      operationId: postSchema
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSchemaPayload'
        description: A JSON value presenting a schema playload. An example of the
          expected schema can be found down here.
        required: false
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSchemaResponse'
          description: successful operation
        307:
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        401:
          content: {}
          description: Client is not authorized or Don't have admin permission
        403:
          content: {}
          description: Client is not authenticated
        404:
          content: {}
          description: Tenant or Namespace or Topic doesn't exist
        409:
          content: {}
          description: Incompatible schema
        412:
          content: {}
          description: Failed to find the ownership for the topic
        422:
          content: {}
          description: Invalid schema data
      summary: Update the schema of a topic
      tags:
      - schemas
      x-codegen-request-body-name: body
  /schemas/{tenant}/{namespace}/{topic}/schema/{version}:
    get:
      operationId: getSchema
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: path
        name: version
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSchemaResponse'
          description: successful operation
        307:
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        401:
          content: {}
          description: Client is not authorized or Don't have admin permission
        403:
          content: {}
          description: Client is not authenticated
        404:
          content: {}
          description: Tenant or Namespace or Topic doesn't exist; or Schema is not
            found for this topic
        412:
          content: {}
          description: Failed to find the ownership for the topic
      summary: Get the schema of a topic at a given version
      tags:
      - schemas
  /tenants:
    get:
      operationId: getTenants
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        403:
          content: {}
          description: The requester doesn't have admin permissions
        404:
          content: {}
          description: Tenant doesn't exist
      summary: Get the list of existing tenants.
      tags:
      - tenants
  /tenants/{tenant}:
    delete:
      operationId: deleteTenant
      parameters:
      - description: The tenant name
        in: path
        name: tenant
        required: true
        schema:
          type: string
      responses:
        403:
          content: {}
          description: The requester doesn't have admin permissions
        404:
          content: {}
          description: Tenant does not exist
        409:
          content: {}
          description: The tenant still has active namespaces
      summary: Delete a tenant and all namespaces and topics under it.
      tags:
      - tenants
    get:
      operationId: getTenantAdmin
      parameters:
      - description: The tenant name
        in: path
        name: tenant
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantInfo'
          description: successful operation
        403:
          content: {}
          description: The requester doesn't have admin permissions
        404:
          content: {}
          description: Tenant does not exist
      summary: Get the admin configuration for a given tenant.
      tags:
      - tenants
    post:
      description: This operation requires Pulsar super-user privileges.
      operationId: updateTenant
      parameters:
      - description: The tenant name
        in: path
        name: tenant
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantInfo'
        description: TenantInfo
        required: false
      responses:
        403:
          content: {}
          description: The requester doesn't have admin permissions
        404:
          content: {}
          description: Tenant does not exist
        409:
          content: {}
          description: Tenant already exists
        412:
          content: {}
          description: Clusters do not exist
      summary: Update the admins for a tenant.
      tags:
      - tenants
      x-codegen-request-body-name: body
    put:
      description: This operation requires Pulsar super-user privileges.
      operationId: createTenant
      parameters:
      - description: The tenant name
        in: path
        name: tenant
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantInfo'
        description: TenantInfo
        required: false
      responses:
        403:
          content: {}
          description: The requester doesn't have admin permissions
        409:
          content: {}
          description: Tenant already exists
        412:
          content: {}
          description: Clusters do not exist
      summary: Create a new tenant.
      tags:
      - tenants
      x-codegen-request-body-name: body
components:
  schemas:
    AllocatorStats:
      example:
        numDirectArenas: 0
        normalCacheSize: 5
        smallCacheSize: 5
        numThreadLocalCaches: 1
        tinyCacheSize: 2
        heapArenas:
        - numActiveNormalAllocations: 6
          numDeallocations: 8
          tinySubpages:
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          smallSubpages:
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          numActiveTinyAllocations: 2
          numActiveAllocations: 1
          chunkLists:
          - chunks:
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            minUsage: 1
            maxUsage: 1
          - chunks:
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            minUsage: 1
            maxUsage: 1
          numHugeDeallocations: 6
          numActiveSmallAllocations: 6
          numAllocations: 4
          numTinySubpages: 7
          numSmallAllocations: 9
          numTinyDeallocations: 9
          numTinyAllocations: 5
          numNormalDeallocations: 3
          numActiveHugeAllocations: 5
          numNormalAllocations: 9
          numSmallSubpages: 9
          numHugeAllocations: 6
          numChunkLists: 3
          numSmallDeallocations: 6
        - numActiveNormalAllocations: 6
          numDeallocations: 8
          tinySubpages:
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          smallSubpages:
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          numActiveTinyAllocations: 2
          numActiveAllocations: 1
          chunkLists:
          - chunks:
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            minUsage: 1
            maxUsage: 1
          - chunks:
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            minUsage: 1
            maxUsage: 1
          numHugeDeallocations: 6
          numActiveSmallAllocations: 6
          numAllocations: 4
          numTinySubpages: 7
          numSmallAllocations: 9
          numTinyDeallocations: 9
          numTinyAllocations: 5
          numNormalDeallocations: 3
          numActiveHugeAllocations: 5
          numNormalAllocations: 9
          numSmallSubpages: 9
          numHugeAllocations: 6
          numChunkLists: 3
          numSmallDeallocations: 6
        directArenas:
        - numActiveNormalAllocations: 6
          numDeallocations: 8
          tinySubpages:
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          smallSubpages:
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          numActiveTinyAllocations: 2
          numActiveAllocations: 1
          chunkLists:
          - chunks:
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            minUsage: 1
            maxUsage: 1
          - chunks:
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            minUsage: 1
            maxUsage: 1
          numHugeDeallocations: 6
          numActiveSmallAllocations: 6
          numAllocations: 4
          numTinySubpages: 7
          numSmallAllocations: 9
          numTinyDeallocations: 9
          numTinyAllocations: 5
          numNormalDeallocations: 3
          numActiveHugeAllocations: 5
          numNormalAllocations: 9
          numSmallSubpages: 9
          numHugeAllocations: 6
          numChunkLists: 3
          numSmallDeallocations: 6
        - numActiveNormalAllocations: 6
          numDeallocations: 8
          tinySubpages:
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          smallSubpages:
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          numActiveTinyAllocations: 2
          numActiveAllocations: 1
          chunkLists:
          - chunks:
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            minUsage: 1
            maxUsage: 1
          - chunks:
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            minUsage: 1
            maxUsage: 1
          numHugeDeallocations: 6
          numActiveSmallAllocations: 6
          numAllocations: 4
          numTinySubpages: 7
          numSmallAllocations: 9
          numTinyDeallocations: 9
          numTinyAllocations: 5
          numNormalDeallocations: 3
          numActiveHugeAllocations: 5
          numNormalAllocations: 9
          numSmallSubpages: 9
          numHugeAllocations: 6
          numChunkLists: 3
          numSmallDeallocations: 6
        numHeapArenas: 6
      properties:
        numDirectArenas:
          format: int32
          type: integer
        numHeapArenas:
          format: int32
          type: integer
        numThreadLocalCaches:
          format: int32
          type: integer
        normalCacheSize:
          format: int32
          type: integer
        smallCacheSize:
          format: int32
          type: integer
        tinyCacheSize:
          format: int32
          type: integer
        directArenas:
          items:
            $ref: '#/components/schemas/PoolArenaStats'
          type: array
        heapArenas:
          items:
            $ref: '#/components/schemas/PoolArenaStats'
          type: array
      type: object
    AuthPolicies:
      example:
        subscription_auth_roles:
          key:
          - subscription_auth_roles
          - subscription_auth_roles
        namespace_auth:
          key:
          - produce
          - produce
        destination_auth:
          key:
            key:
            - produce
            - produce
      properties:
        namespace_auth:
          additionalProperties:
            items:
              enum:
              - produce
              - consume
              - functions
              type: string
            type: array
            uniqueItems: true
          type: object
        destination_auth:
          additionalProperties:
            additionalProperties:
              items:
                enum:
                - produce
                - consume
                - functions
                type: string
              type: array
              uniqueItems: true
            type: object
          type: object
        subscription_auth_roles:
          additionalProperties:
            items:
              type: string
            type: array
            uniqueItems: true
          type: object
      type: object
    AutoFailoverPolicyData:
      description: The auto failover policy configuration data
      example:
        policy_type: min_available
        parameters: |
          {
            "min_limit": 3,
            "usage_threshold": 80
          }
      properties:
        policy_type:
          description: The auto failover policy type
          enum:
          - min_available
          type: string
        parameters:
          additionalProperties:
            type: string
          description: |
            The parameters applied to the auto failover policy specified by `policy_type`.
            The parameters for 'min_available' are :
              - 'min_limit': the limit of minimal number of available brokers in primary group before auto failover
              - 'usage_threshold': the resource usage threshold. If the usage of a broker is beyond this value, it would be marked as unavailable
          example: |
            {
              "min_limit": 3,
              "usage_threshold": 80
            }
          type: object
      type: object
    BacklogQuota:
      example:
        limit: 6
        policy: producer_request_hold
      properties:
        limit:
          format: int64
          type: integer
        policy:
          enum:
          - producer_request_hold
          - producer_exception
          - consumer_backlog_eviction
          type: string
      type: object
    BookieAffinityGroupData:
      example:
        bookkeeperAffinityGroupSecondary: bookkeeperAffinityGroupSecondary
        bookkeeperAffinityGroupPrimary: bookkeeperAffinityGroupPrimary
      properties:
        bookkeeperAffinityGroupPrimary:
          type: string
        bookkeeperAffinityGroupSecondary:
          type: string
      type: object
    BookieInfo:
      example:
        rack: rack
        hostname: hostname
      properties:
        rack:
          type: string
        hostname:
          type: string
      type: object
    BrokerNamespaceIsolationData:
      description: The namespace isolation data for a given broker
      example:
        namespaceRegex:
        - namespaceRegex
        - namespaceRegex
        brokerName: broker1:8080
      properties:
        brokerName:
          description: The broker name
          example: broker1:8080
          type: string
        namespaceRegex:
          description: The namespace-isolation policies attached to this broker
          items:
            type: string
          type: array
      type: object
    BundlesData:
      example:
        boundaries:
        - boundaries
        - boundaries
        numBundles: 0
      properties:
        boundaries:
          items:
            type: string
          type: array
        numBundles:
          format: int32
          type: integer
      type: object
    ClusterData:
      description: The configuration data for a cluster
      example:
        serviceUrlTls: https://pulsar.example.com:8443
        peerClusterNames:
        - peerClusterNames
        - peerClusterNames
        serviceUrl: http://pulsar.example.com:8080
        brokerServiceUrlTls: pulsar+ssl://pulsar.example.com:6651
        brokerServiceUrl: pulsar://pulsar.example.com:6650
      properties:
        serviceUrl:
          description: The HTTP rest service URL (for admin operations)
          example: http://pulsar.example.com:8080
          type: string
        serviceUrlTls:
          description: The HTTPS rest service URL (for admin operations)
          example: https://pulsar.example.com:8443
          type: string
        brokerServiceUrl:
          description: The broker service url (for produce and consume operations)
          example: pulsar://pulsar.example.com:6650
          type: string
        brokerServiceUrlTls:
          description: The secured broker service url (for produce and consume operations)
          example: pulsar+ssl://pulsar.example.com:6651
          type: string
        peerClusterNames:
          description: A set of peer cluster names
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    ConsumerStats:
      example:
        metadata:
          key: metadata
        address: address
        connectedSince: connectedSince
        msgRateRedeliver: 5.025004791520295
        blockedConsumerOnUnackedMsgs: true
        unackedMessages: 9
        clientVersion: clientVersion
        msgThroughputOut: 4.965218492984954
        availablePermits: 9
        msgRateOut: 1.1730742509559433
        consumerName: consumerName
      properties:
        msgRateOut:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        msgRateRedeliver:
          format: double
          type: number
        consumerName:
          type: string
        availablePermits:
          format: int32
          type: integer
        unackedMessages:
          format: int32
          type: integer
        blockedConsumerOnUnackedMsgs:
          type: boolean
        metadata:
          additionalProperties:
            type: string
          type: object
        connectedSince:
          type: string
        clientVersion:
          type: string
        address:
          type: string
      type: object
    CursorDetails:
      example:
        cursorLedgerId: 3
        cursorBacklog: 9
      properties:
        cursorBacklog:
          format: int64
          type: integer
        cursorLedgerId:
          format: int64
          type: integer
      type: object
    CursorStats:
      example:
        numberOfEntriesSinceFirstNotAckedMessage: 1
        markDeletePosition: markDeletePosition
        cursorLedgerLastEntry: 1
        pendingReadOps: 4
        totalNonContiguousDeletedMessagesRange: 6
        lastLedgerSwitchTimestamp: lastLedgerSwitchTimestamp
        readPosition: readPosition
        individuallyDeletedMessages: individuallyDeletedMessages
        waitingReadOp: true
        messagesConsumedCounter: 7
        state: state
        cursorLedger: 1
        properties:
          key: 7
      properties:
        markDeletePosition:
          type: string
        readPosition:
          type: string
        waitingReadOp:
          type: boolean
        pendingReadOps:
          format: int32
          type: integer
        messagesConsumedCounter:
          format: int64
          type: integer
        cursorLedger:
          format: int64
          type: integer
        cursorLedgerLastEntry:
          format: int64
          type: integer
        individuallyDeletedMessages:
          type: string
        lastLedgerSwitchTimestamp:
          type: string
        state:
          type: string
        numberOfEntriesSinceFirstNotAckedMessage:
          format: int64
          type: integer
        totalNonContiguousDeletedMessagesRange:
          format: int32
          type: integer
        properties:
          additionalProperties:
            format: int64
            type: integer
          type: object
      type: object
    DeleteSchemaResponse:
      example:
        version: 0
      properties:
        version:
          format: int64
          type: integer
      type: object
    DispatchRate:
      example:
        dispatchThrottlingRateInMsg: 1
        ratePeriodInSecond: 5
        dispatchThrottlingRateInByte: 5
      properties:
        dispatchThrottlingRateInMsg:
          format: int32
          type: integer
        dispatchThrottlingRateInByte:
          format: int64
          type: integer
        ratePeriodInSecond:
          format: int32
          type: integer
      type: object
    FailureDomain:
      description: The data of a failure domain configuration in a cluster
      example:
        brokers: '[ ''broker-1'', ''broker-2'' ]'
      properties:
        brokers:
          description: The collection of brokers in the same failure domain
          example: '[ ''broker-1'', ''broker-2'' ]'
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    GetSchemaResponse:
      example:
        data: data
        type: NONE
        version: 0
        properties:
          key: properties
        timestamp: 6
      properties:
        version:
          format: int64
          type: integer
        type:
          enum:
          - NONE
          - STRING
          - JSON
          - PROTOBUF
          - AVRO
          - BOOLEAN
          - INT8
          - INT16
          - INT32
          - INT64
          - FLOAT
          - DOUBLE
          - DATE
          - TIME
          - TIMESTAMP
          - KEY_VALUE
          - BYTES
          - AUTO
          - AUTO_CONSUME
          - AUTO_PUBLISH
          type: string
        timestamp:
          format: int64
          type: integer
        data:
          type: string
        properties:
          additionalProperties:
            type: string
          type: object
      type: object
    InternalConfigurationData:
      example:
        stateStorageServiceUrl: stateStorageServiceUrl
        zookeeperServers: zookeeperServers
        ledgersRootPath: ledgersRootPath
        configurationStoreServers: configurationStoreServers
      properties:
        zookeeperServers:
          type: string
        configurationStoreServers:
          type: string
        ledgersRootPath:
          type: string
        stateStorageServiceUrl:
          type: string
      type: object
    LedgerDetails:
      example:
        ledgerId: 7
        entries: 5
        size: 2
        timestamp: 5
      properties:
        entries:
          format: int64
          type: integer
        timestamp:
          format: int64
          type: integer
        size:
          format: int64
          type: integer
        ledgerId:
          format: int64
          type: integer
      type: object
    LedgerInfo:
      example:
        ledgerId: 9
        offloaded: true
        entries: 3
        size: 2
      properties:
        ledgerId:
          format: int64
          type: integer
        entries:
          format: int64
          type: integer
        size:
          format: int64
          type: integer
        offloaded:
          type: boolean
      type: object
    LoadReport:
      example:
        bundleStats:
          key:
            msgRateIn: 2.027123023002322
            cacheSize: 7
            consumerCount: 1
            topics: 6
            producerCount: 1
            msgThroughputIn: 4.145608029883936
            msgThroughputOut: 1.2315135367772556
            msgRateOut: 7.386281948385884
        preAllocatedMsgRateIn: 6.965117697638846
        allocatedMsgRateOut: 6.683562403749608
        overLoaded: true
        memory:
          usage: 9.301444243932576
          limit: 3.616076749251911
        preAllocatedBandwidthIn: 6.438423552598547
        preAllocatedBandwidthOut: 3.5571952270680973
        preAllocatedMemory: 9.018348186070783
        numTopics: 5
        bandwidthIn:
          usage: 9.301444243932576
          limit: 3.616076749251911
        allocatedCPU: 1.1730742509559433
        bundleLosses:
        - bundleLosses
        - bundleLosses
        preAllocatedCPU: 8.762042012749001
        bandwidthOut:
          usage: 9.301444243932576
          limit: 3.616076749251911
        numProducers: 2
        underLoaded: true
        systemResourceUsage:
          bandwidthIn:
            usage: 9.301444243932576
            limit: 3.616076749251911
          memory:
            usage: 9.301444243932576
            limit: 3.616076749251911
          bandwidthOut:
            usage: 9.301444243932576
            limit: 3.616076749251911
          cpu:
            usage: 9.301444243932576
            limit: 3.616076749251911
          directMemory:
            usage: 9.301444243932576
            limit: 3.616076749251911
        allocatedMemory: 4.965218492984954
        brokerVersionString: brokerVersionString
        timestamp: 0
        webServiceUrl: webServiceUrl
        msgRateIn: 6.027456183070403
        loadReportType: loadReportType
        webServiceUrlTls: webServiceUrlTls
        pulsarServiceUrl: pulsarServiceUrl
        cpu:
          usage: 9.301444243932576
          limit: 3.616076749251911
        numConsumers: 5
        msgThroughputIn: 6.778324963048013
        msgThroughputOut: 6.878052220127876
        persistentTopicsEnabled: true
        preAllocatedMsgRateOut: 1.284659006116532
        pulsarServiceUrlTls: pulsarServiceUrlTls
        allocatedMsgRateIn: 9.369310271410669
        allocatedBandwidthIn: 5.025004791520295
        lastUpdate: 2
        name: name
        nonPersistentTopicsEnabled: true
        bundleGains:
        - bundleGains
        - bundleGains
        allocatedBandwidthOut: 9.965781217890562
        directMemory:
          usage: 9.301444243932576
          limit: 3.616076749251911
        msgRateOut: 1.4658129805029452
        numBundles: 7
      properties:
        name:
          type: string
        brokerVersionString:
          type: string
        webServiceUrl:
          type: string
        webServiceUrlTls:
          type: string
        pulsarServiceUrl:
          type: string
        pulsarServiceUrlTls:
          type: string
        persistentTopicsEnabled:
          type: boolean
        nonPersistentTopicsEnabled:
          type: boolean
        timestamp:
          format: int64
          type: integer
        msgRateIn:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
        numTopics:
          format: int32
          type: integer
        numConsumers:
          format: int32
          type: integer
        numProducers:
          format: int32
          type: integer
        numBundles:
          format: int32
          type: integer
        systemResourceUsage:
          $ref: '#/components/schemas/SystemResourceUsage'
        bundleStats:
          additionalProperties:
            $ref: '#/components/schemas/NamespaceBundleStats'
          type: object
        bundleGains:
          items:
            type: string
          type: array
          uniqueItems: true
        bundleLosses:
          items:
            type: string
          type: array
          uniqueItems: true
        allocatedCPU:
          format: double
          type: number
        allocatedMemory:
          format: double
          type: number
        allocatedBandwidthIn:
          format: double
          type: number
        allocatedBandwidthOut:
          format: double
          type: number
        allocatedMsgRateIn:
          format: double
          type: number
        allocatedMsgRateOut:
          format: double
          type: number
        preAllocatedCPU:
          format: double
          type: number
        preAllocatedMemory:
          format: double
          type: number
        preAllocatedBandwidthIn:
          format: double
          type: number
        preAllocatedBandwidthOut:
          format: double
          type: number
        preAllocatedMsgRateIn:
          format: double
          type: number
        preAllocatedMsgRateOut:
          format: double
          type: number
        overLoaded:
          type: boolean
        loadReportType:
          type: string
        underLoaded:
          type: boolean
        bandwidthIn:
          $ref: '#/components/schemas/ResourceUsage'
        bandwidthOut:
          $ref: '#/components/schemas/ResourceUsage'
        memory:
          $ref: '#/components/schemas/ResourceUsage'
        lastUpdate:
          format: int64
          type: integer
        msgThroughputIn:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        cpu:
          $ref: '#/components/schemas/ResourceUsage'
        directMemory:
          $ref: '#/components/schemas/ResourceUsage'
      type: object
    LongRunningProcessStatus:
      example:
        lastError: lastError
        status: NOT_RUN
      properties:
        status:
          enum:
          - NOT_RUN
          - RUNNING
          - SUCCESS
          - ERROR
          type: string
        lastError:
          type: string
      type: object
    MessageId:
      type: object
    MessageIdImpl:
      example:
        ledgerId: 0
        partitionIndex: 1
        entryId: 6
      properties:
        ledgerId:
          format: int64
          type: integer
        entryId:
          format: int64
          type: integer
        partitionIndex:
          format: int32
          type: integer
      type: object
    Metrics:
      example:
        metrics:
          key: '{}'
        dimensions:
          key: dimensions
      properties:
        metrics:
          additionalProperties:
            properties: {}
            type: object
          type: object
        dimensions:
          additionalProperties:
            type: string
          type: object
      type: object
    NamespaceBundleStats:
      example:
        msgRateIn: 2.027123023002322
        cacheSize: 7
        consumerCount: 1
        topics: 6
        producerCount: 1
        msgThroughputIn: 4.145608029883936
        msgThroughputOut: 1.2315135367772556
        msgRateOut: 7.386281948385884
      properties:
        msgRateIn:
          format: double
          type: number
        msgThroughputIn:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        consumerCount:
          format: int32
          type: integer
        producerCount:
          format: int32
          type: integer
        topics:
          format: int64
          type: integer
        cacheSize:
          format: int64
          type: integer
      type: object
    NamespaceIsolationData:
      description: The data of namespace isolation configuration
      example:
        namespaces:
        - namespaces
        - namespaces
        primary:
        - primary
        - primary
        auto_failover_policy:
          policy_type: min_available
          parameters: |
            {
              "min_limit": 3,
              "usage_threshold": 80
            }
      properties:
        namespaces:
          description: The list of namespaces to apply this namespace isolation data
          items:
            type: string
          type: array
        primary:
          description: The list of secondary brokers for serving the list of namespaces
            in this isolation policy
          items:
            type: string
          type: array
        auto_failover_policy:
          $ref: '#/components/schemas/AutoFailoverPolicyData'
      type: object
    NamespaceOwnershipStatus:
      properties:
        broker_assignment:
          enum:
          - primary
          - secondary
          - shared
          type: string
        is_controlled:
          type: boolean
        is_active:
          type: boolean
      type: object
    NonPersistentPublisherStats:
      properties:
        msgRateIn:
          format: double
          type: number
        msgThroughputIn:
          format: double
          type: number
        averageMsgSize:
          format: double
          type: number
        producerId:
          format: int64
          type: integer
        metadata:
          additionalProperties:
            type: string
          type: object
        msgDropRate:
          format: double
          type: number
        connectedSince:
          type: string
        clientVersion:
          type: string
        producerName:
          type: string
        address:
          type: string
      type: object
    NonPersistentReplicatorStats:
      properties:
        msgRateIn:
          format: double
          type: number
        msgThroughputIn:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        msgRateExpired:
          format: double
          type: number
        replicationBacklog:
          format: int64
          type: integer
        connected:
          type: boolean
        replicationDelayInSeconds:
          format: int64
          type: integer
        inboundConnection:
          type: string
        inboundConnectedSince:
          type: string
        outboundConnection:
          type: string
        outboundConnectedSince:
          type: string
        msgDropRate:
          format: double
          type: number
      type: object
    NonPersistentSubscriptionStats:
      properties:
        msgRateOut:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        msgRateRedeliver:
          format: double
          type: number
        msgBacklog:
          format: int64
          type: integer
        blockedSubscriptionOnUnackedMsgs:
          type: boolean
        msgDelayed:
          format: int64
          type: integer
        unackedMessages:
          format: int64
          type: integer
        type:
          enum:
          - Exclusive
          - Shared
          - Failover
          - Key_Shared
          type: string
        activeConsumerName:
          type: string
        msgRateExpired:
          format: double
          type: number
        consumers:
          items:
            $ref: '#/components/schemas/ConsumerStats'
          type: array
        isReplicated:
          type: boolean
        msgDropRate:
          format: double
          type: number
      type: object
    NonPersistentTopicStats:
      properties:
        msgRateIn:
          format: double
          type: number
        msgThroughputIn:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        averageMsgSize:
          format: double
          type: number
        storageSize:
          format: int64
          type: integer
        publishers:
          items:
            $ref: '#/components/schemas/NonPersistentPublisherStats'
          type: array
        subscriptions:
          additionalProperties:
            $ref: '#/components/schemas/NonPersistentSubscriptionStats'
          type: object
        replication:
          additionalProperties:
            $ref: '#/components/schemas/NonPersistentReplicatorStats'
          type: object
        deduplicationStatus:
          type: string
        msgDropRate:
          format: double
          type: number
      type: object
    OffloadProcessStatus:
      example:
        lastError: lastError
        firstUnoffloadedMessage:
          ledgerId: 0
          partitionIndex: 1
          entryId: 6
        status: NOT_RUN
      properties:
        status:
          enum:
          - NOT_RUN
          - RUNNING
          - SUCCESS
          - ERROR
          type: string
        lastError:
          type: string
        firstUnoffloadedMessage:
          $ref: '#/components/schemas/MessageIdImpl'
      type: object
    OutputStream:
      type: object
    PartitionedTopicMetadata:
      example:
        partitions: 0
      properties:
        partitions:
          format: int32
          type: integer
      type: object
    PendingBookieOpsStats:
      properties:
        dataLedgerOpenOp:
          format: int64
          type: integer
        dataLedgerCloseOp:
          format: int64
          type: integer
        dataLedgerCreateOp:
          format: int64
          type: integer
        dataLedgerDeleteOp:
          format: int64
          type: integer
        cursorLedgerOpenOp:
          format: int64
          type: integer
        cursorLedgerCloseOp:
          format: int64
          type: integer
        cursorLedgerCreateOp:
          format: int64
          type: integer
        cursorLedgerDeleteOp:
          format: int64
          type: integer
      type: object
    PersistencePolicies:
      example:
        bookkeeperWriteQuorum: 3
        bookkeeperAckQuorum: 2
        bookkeeperEnsemble: 9
        managedLedgerMaxMarkDeleteRate: 4.145608029883936
      properties:
        bookkeeperEnsemble:
          format: int32
          type: integer
        bookkeeperWriteQuorum:
          format: int32
          type: integer
        bookkeeperAckQuorum:
          format: int32
          type: integer
        managedLedgerMaxMarkDeleteRate:
          format: double
          type: number
      type: object
    PersistentOfflineTopicStats:
      example:
        dataLedgerDetails:
        - ledgerId: 7
          entries: 5
          size: 2
          timestamp: 5
        - ledgerId: 7
          entries: 5
          size: 2
          timestamp: 5
        messageBacklog: 1
        statGeneratedAt: 2000-01-23T04:56:07.000+00:00
        storageSize: 0
        totalMessages: 6
        topicName: topicName
        cursorDetails:
          key:
            cursorLedgerId: 3
            cursorBacklog: 9
        brokerName: brokerName
      properties:
        storageSize:
          format: int64
          type: integer
        totalMessages:
          format: int64
          type: integer
        messageBacklog:
          format: int64
          type: integer
        brokerName:
          type: string
        topicName:
          type: string
        dataLedgerDetails:
          items:
            $ref: '#/components/schemas/LedgerDetails'
          type: array
        cursorDetails:
          additionalProperties:
            $ref: '#/components/schemas/CursorDetails'
          type: object
        statGeneratedAt:
          format: date-time
          type: string
      type: object
    PersistentTopicInternalStats:
      example:
        numberOfEntries: 6
        currentLedgerSize: 5
        ledgers:
        - ledgerId: 9
          offloaded: true
          entries: 3
          size: 2
        - ledgerId: 9
          offloaded: true
          entries: 3
          size: 2
        lastLedgerCreationFailureTimestamp: lastLedgerCreationFailureTimestamp
        currentLedgerEntries: 5
        cursors:
          key:
            numberOfEntriesSinceFirstNotAckedMessage: 1
            markDeletePosition: markDeletePosition
            cursorLedgerLastEntry: 1
            pendingReadOps: 4
            totalNonContiguousDeletedMessagesRange: 6
            lastLedgerSwitchTimestamp: lastLedgerSwitchTimestamp
            readPosition: readPosition
            individuallyDeletedMessages: individuallyDeletedMessages
            waitingReadOp: true
            messagesConsumedCounter: 7
            state: state
            cursorLedger: 1
            properties:
              key: 7
        totalSize: 1
        lastLedgerCreatedTimestamp: lastLedgerCreatedTimestamp
        lastConfirmedEntry: lastConfirmedEntry
        entriesAddedCounter: 0
        state: state
        waitingCursorsCount: 2
        pendingAddEntriesCount: 7
      properties:
        entriesAddedCounter:
          format: int64
          type: integer
        numberOfEntries:
          format: int64
          type: integer
        totalSize:
          format: int64
          type: integer
        currentLedgerEntries:
          format: int64
          type: integer
        currentLedgerSize:
          format: int64
          type: integer
        lastLedgerCreatedTimestamp:
          type: string
        lastLedgerCreationFailureTimestamp:
          type: string
        waitingCursorsCount:
          format: int32
          type: integer
        pendingAddEntriesCount:
          format: int32
          type: integer
        lastConfirmedEntry:
          type: string
        state:
          type: string
        ledgers:
          items:
            $ref: '#/components/schemas/LedgerInfo'
          type: array
        cursors:
          additionalProperties:
            $ref: '#/components/schemas/CursorStats'
          type: object
      type: object
    Policies:
      example:
        backlog_quota_map:
          key:
            limit: 6
            policy: producer_request_hold
        message_ttl_in_seconds: 1
        clusterSubscribeRate:
          key:
            ratePeriodInSecond: 7
            subscribeThrottlingRatePerConsumer: 2
        max_consumers_per_topic: 7
        replicatorDispatchRate:
          key:
            dispatchThrottlingRateInMsg: 1
            ratePeriodInSecond: 5
            dispatchThrottlingRateInByte: 5
        auth_policies:
          subscription_auth_roles:
            key:
            - subscription_auth_roles
            - subscription_auth_roles
          namespace_auth:
            key:
            - produce
            - produce
          destination_auth:
            key:
              key:
              - produce
              - produce
        subscription_auth_mode: None
        max_consumers_per_subscription: 1
        antiAffinityGroup: antiAffinityGroup
        max_producers_per_topic: 6
        schema_auto_update_compatibility_strategy: AutoUpdateDisabled
        latency_stats_sample_rate:
          key: 7
        schema_validation_enforced: true
        offload_threshold: 5
        compaction_threshold: 4
        subscriptionDispatchRate:
          key:
            dispatchThrottlingRateInMsg: 1
            ratePeriodInSecond: 5
            dispatchThrottlingRateInByte: 5
        deduplicationEnabled: true
        encryption_required: true
        replication_clusters:
        - replication_clusters
        - replication_clusters
        retention_policies:
          retentionSizeInMB: 1
          retentionTimeInMinutes: 1
        offload_deletion_lag_ms: 9
        topicDispatchRate:
          key:
            dispatchThrottlingRateInMsg: 1
            ratePeriodInSecond: 5
            dispatchThrottlingRateInByte: 5
        deleted: true
        bundles:
          boundaries:
          - boundaries
          - boundaries
          numBundles: 0
        persistence:
          bookkeeperWriteQuorum: 3
          bookkeeperAckQuorum: 2
          bookkeeperEnsemble: 9
          managedLedgerMaxMarkDeleteRate: 4.145608029883936
      properties:
        auth_policies:
          $ref: '#/components/schemas/AuthPolicies'
        replication_clusters:
          items:
            type: string
          type: array
          uniqueItems: true
        bundles:
          $ref: '#/components/schemas/BundlesData'
        backlog_quota_map:
          additionalProperties:
            $ref: '#/components/schemas/BacklogQuota'
          type: object
        topicDispatchRate:
          additionalProperties:
            $ref: '#/components/schemas/DispatchRate'
          type: object
        subscriptionDispatchRate:
          additionalProperties:
            $ref: '#/components/schemas/DispatchRate'
          type: object
        replicatorDispatchRate:
          additionalProperties:
            $ref: '#/components/schemas/DispatchRate'
          type: object
        clusterSubscribeRate:
          additionalProperties:
            $ref: '#/components/schemas/SubscribeRate'
          type: object
        persistence:
          $ref: '#/components/schemas/PersistencePolicies'
        deduplicationEnabled:
          type: boolean
        latency_stats_sample_rate:
          additionalProperties:
            format: int32
            type: integer
          type: object
        message_ttl_in_seconds:
          format: int32
          type: integer
        retention_policies:
          $ref: '#/components/schemas/RetentionPolicies'
        deleted:
          type: boolean
        antiAffinityGroup:
          type: string
        encryption_required:
          type: boolean
        subscription_auth_mode:
          enum:
          - None
          - Prefix
          type: string
        max_producers_per_topic:
          format: int32
          type: integer
        max_consumers_per_topic:
          format: int32
          type: integer
        max_consumers_per_subscription:
          format: int32
          type: integer
        compaction_threshold:
          format: int64
          type: integer
        offload_threshold:
          format: int64
          type: integer
        offload_deletion_lag_ms:
          format: int64
          type: integer
        schema_auto_update_compatibility_strategy:
          enum:
          - AutoUpdateDisabled
          - Backward
          - Forward
          - Full
          - AlwaysCompatible
          - BackwardTransitive
          - ForwardTransitive
          - FullTransitive
          type: string
        schema_validation_enforced:
          type: boolean
      type: object
    PoolArenaStats:
      example:
        numActiveNormalAllocations: 6
        numDeallocations: 8
        tinySubpages:
        - numAvailable: 4
          elementSize: 7
          pageSize: 1
          maxNumElements: 2
        - numAvailable: 4
          elementSize: 7
          pageSize: 1
          maxNumElements: 2
        smallSubpages:
        - numAvailable: 4
          elementSize: 7
          pageSize: 1
          maxNumElements: 2
        - numAvailable: 4
          elementSize: 7
          pageSize: 1
          maxNumElements: 2
        numActiveTinyAllocations: 2
        numActiveAllocations: 1
        chunkLists:
        - chunks:
          - chunkSize: 7
            usage: 6
            freeBytes: 1
          - chunkSize: 7
            usage: 6
            freeBytes: 1
          minUsage: 1
          maxUsage: 1
        - chunks:
          - chunkSize: 7
            usage: 6
            freeBytes: 1
          - chunkSize: 7
            usage: 6
            freeBytes: 1
          minUsage: 1
          maxUsage: 1
        numHugeDeallocations: 6
        numActiveSmallAllocations: 6
        numAllocations: 4
        numTinySubpages: 7
        numSmallAllocations: 9
        numTinyDeallocations: 9
        numTinyAllocations: 5
        numNormalDeallocations: 3
        numActiveHugeAllocations: 5
        numNormalAllocations: 9
        numSmallSubpages: 9
        numHugeAllocations: 6
        numChunkLists: 3
        numSmallDeallocations: 6
      properties:
        numTinySubpages:
          format: int32
          type: integer
        numSmallSubpages:
          format: int32
          type: integer
        numChunkLists:
          format: int32
          type: integer
        tinySubpages:
          items:
            $ref: '#/components/schemas/PoolSubpageStats'
          type: array
        smallSubpages:
          items:
            $ref: '#/components/schemas/PoolSubpageStats'
          type: array
        chunkLists:
          items:
            $ref: '#/components/schemas/PoolChunkListStats'
          type: array
        numAllocations:
          format: int64
          type: integer
        numTinyAllocations:
          format: int64
          type: integer
        numSmallAllocations:
          format: int64
          type: integer
        numNormalAllocations:
          format: int64
          type: integer
        numHugeAllocations:
          format: int64
          type: integer
        numDeallocations:
          format: int64
          type: integer
        numTinyDeallocations:
          format: int64
          type: integer
        numSmallDeallocations:
          format: int64
          type: integer
        numNormalDeallocations:
          format: int64
          type: integer
        numHugeDeallocations:
          format: int64
          type: integer
        numActiveAllocations:
          format: int64
          type: integer
        numActiveTinyAllocations:
          format: int64
          type: integer
        numActiveSmallAllocations:
          format: int64
          type: integer
        numActiveNormalAllocations:
          format: int64
          type: integer
        numActiveHugeAllocations:
          format: int64
          type: integer
      type: object
    PoolChunkListStats:
      example:
        chunks:
        - chunkSize: 7
          usage: 6
          freeBytes: 1
        - chunkSize: 7
          usage: 6
          freeBytes: 1
        minUsage: 1
        maxUsage: 1
      properties:
        minUsage:
          format: int32
          type: integer
        maxUsage:
          format: int32
          type: integer
        chunks:
          items:
            $ref: '#/components/schemas/PoolChunkStats'
          type: array
      type: object
    PoolChunkStats:
      example:
        chunkSize: 7
        usage: 6
        freeBytes: 1
      properties:
        usage:
          format: int32
          type: integer
        chunkSize:
          format: int32
          type: integer
        freeBytes:
          format: int32
          type: integer
      type: object
    PoolSubpageStats:
      example:
        numAvailable: 4
        elementSize: 7
        pageSize: 1
        maxNumElements: 2
      properties:
        maxNumElements:
          format: int32
          type: integer
        numAvailable:
          format: int32
          type: integer
        elementSize:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
      type: object
    PostSchemaPayload:
      example:
        schema: schema
        type: type
        properties:
          key: properties
      properties:
        type:
          type: string
        schema:
          type: string
        properties:
          additionalProperties:
            type: string
          type: object
      type: object
    PostSchemaResponse:
      example:
        version: '{}'
      properties:
        version:
          type: object
      type: object
    PublisherStats:
      example:
        msgRateIn: 7.061401241503109
        metadata:
          key: metadata
        address: address
        connectedSince: connectedSince
        producerName: producerName
        averageMsgSize: 3.616076749251911
        producerId: 2
        clientVersion: clientVersion
        msgThroughputIn: 9.301444243932576
      properties:
        msgRateIn:
          format: double
          type: number
        msgThroughputIn:
          format: double
          type: number
        averageMsgSize:
          format: double
          type: number
        producerId:
          format: int64
          type: integer
        metadata:
          additionalProperties:
            type: string
          type: object
        connectedSince:
          type: string
        clientVersion:
          type: string
        producerName:
          type: string
        address:
          type: string
      type: object
    ReplicatorStats:
      example:
        msgRateIn: 6.683562403749608
        connected: true
        replicationDelayInSeconds: 1
        inboundConnection: inboundConnection
        msgRateExpired: 3.5571952270680973
        replicationBacklog: 6
        outboundConnectedSince: outboundConnectedSince
        outboundConnection: outboundConnection
        inboundConnectedSince: inboundConnectedSince
        msgThroughputIn: 8.762042012749001
        msgThroughputOut: 6.438423552598547
        msgRateOut: 9.018348186070783
      properties:
        msgRateIn:
          format: double
          type: number
        msgThroughputIn:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        msgRateExpired:
          format: double
          type: number
        replicationBacklog:
          format: int64
          type: integer
        connected:
          type: boolean
        replicationDelayInSeconds:
          format: int64
          type: integer
        inboundConnection:
          type: string
        inboundConnectedSince:
          type: string
        outboundConnection:
          type: string
        outboundConnectedSince:
          type: string
      type: object
    ResourceDescription:
      properties:
        usagePct:
          format: int32
          type: integer
        resourceUsage:
          additionalProperties:
            $ref: '#/components/schemas/ResourceUsage'
          type: object
      type: object
    ResourceQuota:
      example:
        msgRateIn: 0.8008281904610115
        bandwidthIn: 1.4658129805029452
        memory: 5.637376656633329
        bandwidthOut: 5.962133916683182
        dynamic: true
        msgRateOut: 6.027456183070403
      properties:
        msgRateIn:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
        bandwidthIn:
          format: double
          type: number
        bandwidthOut:
          format: double
          type: number
        memory:
          format: double
          type: number
        dynamic:
          type: boolean
      type: object
    ResourceUnit:
      properties:
        availableResource:
          $ref: '#/components/schemas/ResourceDescription'
        resourceId:
          type: string
      type: object
    ResourceUsage:
      example:
        usage: 9.301444243932576
        limit: 3.616076749251911
      properties:
        usage:
          format: double
          type: number
        limit:
          format: double
          type: number
      type: object
    RetentionPolicies:
      example:
        retentionSizeInMB: 1
        retentionTimeInMinutes: 1
      properties:
        retentionTimeInMinutes:
          format: int32
          type: integer
        retentionSizeInMB:
          format: int64
          type: integer
      type: object
    SchemaVersion:
      type: object
    SubscribeRate:
      example:
        ratePeriodInSecond: 7
        subscribeThrottlingRatePerConsumer: 2
      properties:
        subscribeThrottlingRatePerConsumer:
          format: int32
          type: integer
        ratePeriodInSecond:
          format: int32
          type: integer
      type: object
    SubscriptionStats:
      example:
        activeConsumerName: activeConsumerName
        isReplicated: true
        msgRateExpired: 7.457744773683766
        msgRateRedeliver: 1.2315135367772556
        consumers:
        - metadata:
            key: metadata
          address: address
          connectedSince: connectedSince
          msgRateRedeliver: 5.025004791520295
          blockedConsumerOnUnackedMsgs: true
          unackedMessages: 9
          clientVersion: clientVersion
          msgThroughputOut: 4.965218492984954
          availablePermits: 9
          msgRateOut: 1.1730742509559433
          consumerName: consumerName
        - metadata:
            key: metadata
          address: address
          connectedSince: connectedSince
          msgRateRedeliver: 5.025004791520295
          blockedConsumerOnUnackedMsgs: true
          unackedMessages: 9
          clientVersion: clientVersion
          msgThroughputOut: 4.965218492984954
          availablePermits: 9
          msgRateOut: 1.1730742509559433
          consumerName: consumerName
        blockedSubscriptionOnUnackedMsgs: true
        msgDelayed: 1
        unackedMessages: 6
        type: Exclusive
        msgThroughputOut: 7.386281948385884
        msgBacklog: 1
        msgRateOut: 4.145608029883936
      properties:
        msgRateOut:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        msgRateRedeliver:
          format: double
          type: number
        msgBacklog:
          format: int64
          type: integer
        blockedSubscriptionOnUnackedMsgs:
          type: boolean
        msgDelayed:
          format: int64
          type: integer
        unackedMessages:
          format: int64
          type: integer
        type:
          enum:
          - Exclusive
          - Shared
          - Failover
          - Key_Shared
          type: string
        activeConsumerName:
          type: string
        msgRateExpired:
          format: double
          type: number
        consumers:
          items:
            $ref: '#/components/schemas/ConsumerStats'
          type: array
        isReplicated:
          type: boolean
      type: object
    SystemResourceUsage:
      example:
        bandwidthIn:
          usage: 9.301444243932576
          limit: 3.616076749251911
        memory:
          usage: 9.301444243932576
          limit: 3.616076749251911
        bandwidthOut:
          usage: 9.301444243932576
          limit: 3.616076749251911
        cpu:
          usage: 9.301444243932576
          limit: 3.616076749251911
        directMemory:
          usage: 9.301444243932576
          limit: 3.616076749251911
      properties:
        bandwidthIn:
          $ref: '#/components/schemas/ResourceUsage'
        bandwidthOut:
          $ref: '#/components/schemas/ResourceUsage'
        cpu:
          $ref: '#/components/schemas/ResourceUsage'
        memory:
          $ref: '#/components/schemas/ResourceUsage'
        directMemory:
          $ref: '#/components/schemas/ResourceUsage'
      type: object
    TenantInfo:
      description: Information of adminRoles and allowedClusters for tenant
      example:
        adminRoles:
        - adminRoles
        - adminRoles
        allowedClusters:
        - allowedClusters
        - allowedClusters
      properties:
        adminRoles:
          description: Comma separated list of auth principal allowed to administrate
            the tenant.
          items:
            type: string
          type: array
          uniqueItems: true
        allowedClusters:
          description: Comma separated allowed clusters.
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    TopicStats:
      example:
        msgRateIn: 0.8008281904610115
        replication:
          key:
            msgRateIn: 6.683562403749608
            connected: true
            replicationDelayInSeconds: 1
            inboundConnection: inboundConnection
            msgRateExpired: 3.5571952270680973
            replicationBacklog: 6
            outboundConnectedSince: outboundConnectedSince
            outboundConnection: outboundConnection
            inboundConnectedSince: inboundConnectedSince
            msgThroughputIn: 8.762042012749001
            msgThroughputOut: 6.438423552598547
            msgRateOut: 9.018348186070783
        subscriptions:
          key:
            activeConsumerName: activeConsumerName
            isReplicated: true
            msgRateExpired: 7.457744773683766
            msgRateRedeliver: 1.2315135367772556
            consumers:
            - metadata:
                key: metadata
              address: address
              connectedSince: connectedSince
              msgRateRedeliver: 5.025004791520295
              blockedConsumerOnUnackedMsgs: true
              unackedMessages: 9
              clientVersion: clientVersion
              msgThroughputOut: 4.965218492984954
              availablePermits: 9
              msgRateOut: 1.1730742509559433
              consumerName: consumerName
            - metadata:
                key: metadata
              address: address
              connectedSince: connectedSince
              msgRateRedeliver: 5.025004791520295
              blockedConsumerOnUnackedMsgs: true
              unackedMessages: 9
              clientVersion: clientVersion
              msgThroughputOut: 4.965218492984954
              availablePermits: 9
              msgRateOut: 1.1730742509559433
              consumerName: consumerName
            blockedSubscriptionOnUnackedMsgs: true
            msgDelayed: 1
            unackedMessages: 6
            type: Exclusive
            msgThroughputOut: 7.386281948385884
            msgBacklog: 1
            msgRateOut: 4.145608029883936
        storageSize: 2
        publishers:
        - msgRateIn: 7.061401241503109
          metadata:
            key: metadata
          address: address
          connectedSince: connectedSince
          producerName: producerName
          averageMsgSize: 3.616076749251911
          producerId: 2
          clientVersion: clientVersion
          msgThroughputIn: 9.301444243932576
        - msgRateIn: 7.061401241503109
          metadata:
            key: metadata
          address: address
          connectedSince: connectedSince
          producerName: producerName
          averageMsgSize: 3.616076749251911
          producerId: 2
          clientVersion: clientVersion
          msgThroughputIn: 9.301444243932576
        averageMsgSize: 5.637376656633329
        deduplicationStatus: deduplicationStatus
        msgThroughputIn: 6.027456183070403
        msgThroughputOut: 5.962133916683182
        msgRateOut: 1.4658129805029452
      properties:
        msgRateIn:
          format: double
          type: number
        msgThroughputIn:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        averageMsgSize:
          format: double
          type: number
        storageSize:
          format: int64
          type: integer
        publishers:
          items:
            $ref: '#/components/schemas/PublisherStats'
          type: array
        subscriptions:
          additionalProperties:
            $ref: '#/components/schemas/SubscriptionStats'
          type: object
        replication:
          additionalProperties:
            $ref: '#/components/schemas/ReplicatorStats'
          type: object
        deduplicationStatus:
          type: string
      type: object
